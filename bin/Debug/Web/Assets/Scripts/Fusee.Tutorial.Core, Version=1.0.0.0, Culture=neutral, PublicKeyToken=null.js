/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm09 = JSIL.DeclareAssembly("Fusee.Tutorial.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Tutorial");
JSIL.DeclareNamespace("Fusee.Tutorial.Core");
/* class Fusee.Tutorial.Core.Camera */ 

(function Camera$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.Fusee.Serialization.TransformComponent)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.Fusee.Math.Core.float2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.Fusee.Math.Core.float4x4)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.Bunker)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Math)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.Fusee.Math.Core.M)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float2"), [$asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float4x4"), [$asm06.TypeRef("Fusee.Math.Core.float4x4"), $asm06.TypeRef("Fusee.Math.Core.float4x4")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [$asm06.TypeRef("Fusee.Math.Core.float3"), $asm14.TypeRef("System.Single")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float2"), [$asm06.TypeRef("Fusee.Math.Core.float2"), $asm14.TypeRef("System.Single")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Single"), [$asm14.TypeRef("System.Single")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Single"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single")
      ]))) ();
  };


  function Camera__ctor () {
    this._angleHorz = 1.04719758;
    this._angleVert = -0.2617994;
    this.RotationSpeed = 7;
    this.Damping = 0.8;
    $T00().prototype._ctor.call(this);
    this.Translation = $S00().Construct(0, 0, 0);
    this.Rotation = $S00().Construct(0, 0, 0);
    this.Scale = $S00().Construct(0, 0, 0);
    this.up = $S00().Construct(0, 1, 0);
    this.target = $S00().Construct(50, 50, 50);
    this.pivot = $S00().Construct(1, -1.8, -2.7);
    this._fieldOfView = 0.7853982;
    this._zoomLimits = $S01().Construct(1, 100000);
  }; 

  function Camera_get_CurDamp () {
    return this._curDamp;
  }; 

  function Camera_get_FieldOfView () {
    return this._fieldOfView;
  }; 

  function Camera_get_MtxCam () {
    return $T03().LookAt($T01().op_UnaryNegation(this.eye.MemberwiseClone()), this.target.MemberwiseClone(), this.up.MemberwiseClone());
  }; 

  function Camera_get_MtxOffset () {
    return $T03().CreateTranslation(this.Translation.x, this.Translation.y, this.Translation.z);
  }; 

  function Camera_get_MtxPivot () {
    return $T03().CreateTranslation(this.pivot.x, this.pivot.y, this.pivot.z);
  }; 

  function Camera_get_MtxRot () {
    return $S02().CallStatic($T03(), "op_Multiply", null, 
      $S02().CallStatic($T03(), "op_Multiply", null, 
        $T03().CreateRotationZ(this.Rotation.z).MemberwiseClone(), 
        $T03().CreateRotationX(this.Rotation.x).MemberwiseClone()
      ).MemberwiseClone(), 
      $T03().CreateRotationY(this.Rotation.y).MemberwiseClone()
    );
  }; 

  function Camera_get_Zoom () {
    return this.eye.z;
  }; 

  function Camera_mountCameraOnBunker (_bunker) {
    this.Translation = $T01().op_Subtraction(
      $T01().op_UnaryNegation(_bunker.bunkerBase.Translation.MemberwiseClone()).MemberwiseClone(), 
      $S03().CallStatic($T01(), "op_Multiply", null, $S03().CallStatic($T01(), "op_Multiply", null, _bunker.bunkerPlatform.Translation.MemberwiseClone(), 0.03).MemberwiseClone(), 1.1)
    );
  }; 

  function Camera_mouseWheelZoom (wheelVel) {
    this._zoomVel = +wheelVel * -2;
    this._angleRoll = +this._angleRoll * (+this._curDamp * 0.8);
    this._offset = $S04().CallStatic($T02(), "op_Multiply", null, this._offset.MemberwiseClone(), +this._curDamp * 0.8);
    return false;
  }; 

  function Camera_rotate (vel) {
    this._angleVelHorz = (-this.RotationSpeed * +vel.x) * 2E-06;
    this._angleVelVert = (-this.RotationSpeed * +vel.y) * 2E-06;
  }; 

  function Camera_rotateDump () {
    this._angleVelHorz = +this._angleVelHorz * +this._curDamp;
    this._angleVelVert = +this._angleVelVert * +this._curDamp;
  }; 

  function Camera_set_CurDamp (value) {
    this._curDamp = +value;
  }; 

  function Camera_set_FieldOfView (value) {
    this._fieldOfView = +value;
  }; 

  function Camera_set_Zoom (value) {
    this.eye.z = +value;
    this.eye.z = +$T06().Max(this._zoomLimits.x, this.eye.z);
    this.eye.z = +$T06().Min(this._zoomLimits.y, this.eye.z);
  }; 

  function Camera_touchZoom (_twoPointAngle, _twoPointMidPoint, _twoPointDistanceVel, _twoTouchRepeated) {
    var flag = !_twoTouchRepeated;
    if (flag) {
      this._angleRollInit = +_twoPointAngle - +this._angleRoll;
      this._offsetInit = $T02().op_Subtraction(_twoPointMidPoint.MemberwiseClone(), this._offset);
    }
    this._zoomVel = +_twoPointDistanceVel * -0.01;
    this._angleRoll = +_twoPointAngle - +this._angleRollInit;
    this._offset = $T02().op_Subtraction(_twoPointMidPoint.MemberwiseClone(), this._offsetInit);
    return true;
  }; 

  function Camera_update () {
    this.set_Zoom(+this.get_Zoom() + +this._zoomVel);
    this._angleHorz = +this._angleHorz + +this._angleVelHorz;
    this._angleHorz = +$S05().CallStatic($T08(), "MinAngle", null, this._angleHorz);
    this._angleVert = +this._angleVert + +this._angleVelVert;
    this._angleVert = +$S06().CallStatic($T08(), "Clamp", null, this._angleVert, -1.57079637, 1.57079637);
    this._angleRoll = +$S05().CallStatic($T08(), "MinAngle", null, this._angleRoll);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Fusee.Serialization.TransformComponent"), 
      Name: "Fusee.Tutorial.Core.Camera", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Camera__ctor
    );

    $.Method({Static:false, Public:true }, "get_CurDamp", 
      JSIL.MethodSignature.Return($.Single), 
      Camera_get_CurDamp
    );

    $.Method({Static:false, Public:true }, "get_FieldOfView", 
      JSIL.MethodSignature.Return($.Single), 
      Camera_get_FieldOfView
    );

    $.Method({Static:false, Public:true }, "get_MtxCam", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Fusee.Math.Core.float4x4")), 
      Camera_get_MtxCam
    );

    $.Method({Static:false, Public:true }, "get_MtxOffset", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Fusee.Math.Core.float4x4")), 
      Camera_get_MtxOffset
    );

    $.Method({Static:false, Public:true }, "get_MtxPivot", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Fusee.Math.Core.float4x4")), 
      Camera_get_MtxPivot
    );

    $.Method({Static:false, Public:true }, "get_MtxRot", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Fusee.Math.Core.float4x4")), 
      Camera_get_MtxRot
    );

    $.Method({Static:false, Public:true }, "get_Zoom", 
      JSIL.MethodSignature.Return($.Single), 
      Camera_get_Zoom
    );

    $.Method({Static:false, Public:true }, "mountCameraOnBunker", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Tutorial.Core.Assets.Bunker")), 
      Camera_mountCameraOnBunker
    );

    $.Method({Static:false, Public:true }, "mouseWheelZoom", 
      new JSIL.MethodSignature($.Boolean, [$.Single]), 
      Camera_mouseWheelZoom
    );

    $.Method({Static:false, Public:true }, "rotate", 
      JSIL.MethodSignature.Action($asm06.TypeRef("Fusee.Math.Core.float2")), 
      Camera_rotate
    );

    $.Method({Static:false, Public:true }, "rotateDump", 
      JSIL.MethodSignature.Void, 
      Camera_rotateDump
    );

    $.Method({Static:false, Public:true }, "set_CurDamp", 
      JSIL.MethodSignature.Action($.Single), 
      Camera_set_CurDamp
    );

    $.Method({Static:false, Public:true }, "set_FieldOfView", 
      JSIL.MethodSignature.Action($.Single), 
      Camera_set_FieldOfView
    );

    $.Method({Static:false, Public:true }, "set_Zoom", 
      JSIL.MethodSignature.Action($.Single), 
      Camera_set_Zoom
    );

    $.Method({Static:false, Public:true }, "touchZoom", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $asm06.TypeRef("Fusee.Math.Core.float2"), 
          $.Single, $.Boolean
        ]), 
      Camera_touchZoom
    );

    $.Method({Static:false, Public:true }, "update", 
      JSIL.MethodSignature.Void, 
      Camera_update
    );

    $.Field({Static:false, Public:false}, "_angleHorz", $.Single);

    $.Field({Static:false, Public:false}, "_angleVert", $.Single);

    $.Field({Static:false, Public:false}, "_curDamp", $.Single);

    $.Field({Static:false, Public:false}, "_angleVelHorz", $.Single);

    $.Field({Static:false, Public:false}, "_angleVelVert", $.Single);

    $.Field({Static:false, Public:false}, "_angleRoll", $.Single);

    $.Field({Static:false, Public:false}, "_angleRollInit", $.Single);

    $.Field({Static:false, Public:false}, "_zoomVel", $.Single);

    $.Field({Static:false, Public:false}, "_fieldOfView", $.Single);

    $.Field({Static:false, Public:false}, "_offset", $asm06.TypeRef("Fusee.Math.Core.float2"));

    $.Field({Static:false, Public:false}, "_offsetInit", $asm06.TypeRef("Fusee.Math.Core.float2"));

    $.Field({Static:false, Public:false}, "_zoomLimits", $asm06.TypeRef("Fusee.Math.Core.float2"));

    $.Field({Static:false, Public:true }, "projection", $asm06.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "RotationSpeed", $.Single);

    $.Field({Static:false, Public:true , ReadOnly:true }, "Damping", $.Single);

    $.Field({Static:false, Public:true }, "eye", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "target", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "up", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "pivot", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "CurDamp", $.Single);

    $.Property({Static:false, Public:true }, "Zoom", $.Single);

    $.Property({Static:false, Public:true }, "MtxRot", $asm06.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "MtxPivot", $asm06.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "MtxCam", $asm06.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "MtxOffset", $asm06.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "FieldOfView", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.Crossjoint */ 

(function Crossjoint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };


  function Crossjoint__ctor (_index, _pos) {
    this.index = (_index | 0);
    this.pos = _pos.MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.Crossjoint", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm06.TypeRef("Fusee.Math.Core.float3")]), 
      Crossjoint__ctor
    );

    $.Field({Static:false, Public:true }, "index", $.Int32);

    $.Field({Static:false, Public:true }, "pos", $asm06.TypeRef("Fusee.Math.Core.float3"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.MapGenerator */ 

(function MapGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.Fusee.Math.Core.float2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm06.Fusee.Math.Core.float2, $asm09.Fusee.Tutorial.Core.MapTile))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm06.Fusee.Math.Core.float2, $asm09.Fusee.Tutorial.Core.MapTile))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Collections.Generic.KeyValuePair$b2.Of($asm06.Fusee.Math.Core.float2, $asm09.Fusee.Tutorial.Core.MapTile))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Random)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.Constants)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.Fusee.Tutorial.Core.MapTile)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Math)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.Fusee.Serialization.MaterialComponent)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.Fusee.Serialization.MatChannelContainer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm09.Fusee.Tutorial.Core.TextureImage))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.AssetsManager)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm14.System.String))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.Fusee.Serialization.SpecularChannelContainer)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.Fusee.Serialization.MeshComponent)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.Fusee.Math.Core.AABBf)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm14.System.UInt16)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm06.Fusee.Math.Core.float3))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm14.System.UInt16))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm06.Fusee.Math.Core.float2))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Crossjoint)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm14.System.Int32))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm14.System.Convert)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0B.Fusee.Xene.ContainerExtensions)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.Fusee.Serialization.TransformComponent)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm09.Fusee.Tutorial.Core.MapTile))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm07.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.SceneManager)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Renderer)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float2"), [$asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float3")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm14.TypeRef("System.UInt16")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float2")]), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.TypeRef("Fusee.Math.Core.float3")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Int32")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm14.TypeRef("System.UInt16")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.UInt16"), [$asm14.TypeRef("System.Int32")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.TypeRef("Fusee.Math.Core.float2")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [$asm06.TypeRef("Fusee.Math.Core.float3")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Tutorial.Core.MapTile")]), null))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Tutorial.Core.MapTile")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm06.TypeRef("Fusee.Math.Core.float2"), $asm09.TypeRef("Fusee.Tutorial.Core.MapTile")]), null))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), null))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Serialization.SceneComponentContainer")]), null))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Serialization.SceneComponentContainer")]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [$asm06.TypeRef("Fusee.Math.Core.float3"), $asm14.TypeRef("System.Single")]))) ();
  };


  function MapGenerator_addHeightNoise (minHeight, maxHeight, _isRenderTime) {
    var float = $S00().Construct(minHeight, maxHeight);
    var enumerator = $T04().prototype.GetEnumerator.call($thisType.tileIndicies);

    while ($T03().prototype.MoveNext.call(enumerator)) {
      var current = $T03().prototype.get_Current.call(enumerator).MemberwiseClone();
      $thisType.translateTile(
        current.get_Value(), 
        $S01().Construct(0, Math.fround(float.x + (+$T08().random.NextDouble() * float.y)), 0), 
        _isRenderTime
      );
    }
  }; 

  function MapGenerator_createHillAt (_gridPos, height, _boundaries, _isRenderTime) {
    var key = new ($T00())();

    for (var i = ((-((_boundaries.x) | 0)) | 0); i < ((_boundaries.x) | 0); i = ((i + 1) | 0)) {

      for (var j = ((-((_boundaries.y) | 0)) | 0); j < ((_boundaries.y) | 0); j = ((j + 1) | 0)) {
        (key = key.MemberwiseClone(), 
          $T00().prototype._ctor.call(key, +_gridPos.x + +i, +_gridPos.y + +j));
        var flag = $thisType.tileIndicies.ContainsKey(key.MemberwiseClone());
        if (flag) {
          var tile = $thisType.tileIndicies.get_Item(key);
          var num = ($T0B().Max(Math.abs(i), Math.abs(j)) | 0);
          $thisType.translateTile(tile, $S01().Construct(0, (+height - (+((+num / +_boundaries.x)) * +height)), 0), _isRenderTime);
        }
      }
    }
  }; 

  function MapGenerator_distanceBetweenGrids (_grid1, _grid2) {
    var num = (Math.abs((+_grid1.x - +_grid2.x)));
    var num2 = (Math.abs((+_grid1.y - +_grid2.y)));
    return Math.fround(Math.sqrt((num * num) + (num2 * num2)));
  }; 

  function MapGenerator_generateMaterial () {
    var materialComponent = new ($T0D())();
    materialComponent.Diffuse = new ($T0E())();
    materialComponent.Diffuse.Color = $S01().Construct(1, 1, 1);
    materialComponent.Diffuse.Mix = 1;
    materialComponent.Diffuse.Texture = $T10().textures.get_Item($T10().TEXTURE_MAP_FILES.get_Item($thisType._mapTextureId)).path;
    materialComponent.Emissive = new ($T0E())();
    materialComponent.Emissive.Color = $S01().Construct(1, 1, 0.5);
    materialComponent.Emissive.Mix = 0.15;
    materialComponent.Specular = new ($T12())();
    materialComponent.Specular.Color = $S01().Construct(1, 1, 0.75);
    materialComponent.Specular.Intensity = 0.15;
    materialComponent.Specular.Shininess = 1;
    materialComponent.Specular.Mix = 1;
    return materialComponent;
  }; 

  function MapGenerator_generatePlainMapMesh () {
    var $hoisted00 = new ($T00())(), $hoisted01 = new ($T00())(), $hoisted02 = new ($T00())(), $hoisted03 = new ($T00())(), $hoisted04 = new ($T00())(), $hoisted05 = new ($T00())();
    var float = new ($T00())(), key = new ($T00())();
    var meshComponent = new ($T13())();
    meshComponent.BoundingBox = new ($T14())($T06().Zero.MemberwiseClone(), $T06().Zero.MemberwiseClone());
    meshComponent.Normals = JSIL.Array.New($T06(), 0);
    meshComponent.Triangles = JSIL.Array.New($T15(), 0);
    meshComponent.Vertices = JSIL.Array.New($T06(), 0);
    var zero = $T06().Zero.MemberwiseClone();
    var list = $S02().Construct();
    var list2 = $S03().Construct();
    var list3 = $S02().Construct();
    var list4 = $S04().Construct();
    var mapTile = new ($T0A())($T00().Zero.MemberwiseClone());

    for (var num = 0; +num < +$thisType.gridSize.x; num = ((num + 1) | 0)) {

      for (var num2 = 0; +num2 < +$thisType.gridSize.y; num2 = ((num2 + 1) | 0)) {
        var x = 18 * +num;
        var z = 18 * +num2;
        var crossjoint = new ($T19())(list.get_Count(), $S01().Construct(x, 0, z));
        $S05().CallVirtual("Add", null, list, crossjoint.pos.MemberwiseClone());

        for (var i = 0; i <= 1; i = ((i + 1) | 0)) {

          for (var j = 0; j <= 1; j = ((j + 1) | 0)) {
            (float = float.MemberwiseClone(), 
              $T00().prototype._ctor.call(float, +(num + i), +(num2 + j)));
            var flag = $thisType.tileIndicies.ContainsKey(float.MemberwiseClone());
            if (flag) {
              mapTile = $thisType.tileIndicies.get_Item(float);
              $S06().CallVirtual("Add", null, mapTile.neighborJointsIndicies, crossjoint.index);
            } else {
              mapTile = new ($T0A())(float.MemberwiseClone());
              $thisType.tileIndicies.Add(mapTile.index.MemberwiseClone(), mapTile);
              $S06().CallVirtual("Add", null, mapTile.neighborJointsIndicies, crossjoint.index);
              x = (+crossjoint.pos.x - 9) + (+i * 18);
              z = (+crossjoint.pos.z - 9) + (+j * 18);
              (mapTile.CenterPos = $S01().Construct(x, 0, z));

              for (var k = 0; k <= 1; k = ((k + 1) | 0)) {

                for (var l = 0; l <= 1; l = ((l + 1) | 0)) {
                  x = (+mapTile.get_CenterPos().x - 7.5) + (+l * 15);
                  z = (+mapTile.get_CenterPos().z - 7.5) + (+k * 15);
                  (zero = zero.MemberwiseClone(), 
                    $T06().prototype._ctor.call(zero, x, 0, z));
                  $S05().CallVirtual("Add", null, list, zero.MemberwiseClone());
                  $S06().CallVirtual("Add", null, mapTile.verticesIndicies, (((list.get_Count() | 0) - 1) | 0));
                }
              }
              $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (((((list.get_Count() | 0) + 0) | 0) - 4) | 0)));
              $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (((((list.get_Count() | 0) + 1) | 0) - 4) | 0)));
              $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (((((list.get_Count() | 0) + 2) | 0) - 4) | 0)));
              $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (((((list.get_Count() | 0) + 1) | 0) - 4) | 0)));
              $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (((((list.get_Count() | 0) + 3) | 0) - 4) | 0)));
              $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (((((list.get_Count() | 0) + 2) | 0) - 4) | 0)));
              (key = key.MemberwiseClone(), 
                $T00().prototype._ctor.call(key, +mapTile.index.x - 1, mapTile.index.y));
              var flag2 = $thisType.tileIndicies.ContainsKey(key.MemberwiseClone());
              if (flag2) {
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(key).verticesIndicies).get_Item(3)));
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(key).verticesIndicies).get_Item(1)));
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (mapTile.verticesIndicies).get_Item(0)));
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(key).verticesIndicies).get_Item(3)));
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (mapTile.verticesIndicies).get_Item(0)));
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (mapTile.verticesIndicies).get_Item(2)));
              }
              (key = key.MemberwiseClone(), 
                $T00().prototype._ctor.call(key, mapTile.index.x, +mapTile.index.y - 1));
              var flag3 = $thisType.tileIndicies.ContainsKey(key.MemberwiseClone());
              if (flag3) {
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(key).verticesIndicies).get_Item(2)));
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(key).verticesIndicies).get_Item(3)));
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (mapTile.verticesIndicies).get_Item(0)));
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(key).verticesIndicies).get_Item(3)));
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (mapTile.verticesIndicies).get_Item(1)));
                $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, (mapTile.verticesIndicies).get_Item(0)));
              }
            }
          }
        }
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(mapTile.index).verticesIndicies).get_Item(0)));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, crossjoint.index));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(($hoisted00._ctor(mapTile.index.x, +mapTile.index.y - 1), 
                  $hoisted00)).verticesIndicies).get_Item(2)));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, crossjoint.index));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(mapTile.index).verticesIndicies).get_Item(0)));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(($hoisted01._ctor(+mapTile.index.x - 1, mapTile.index.y), 
                  $hoisted01)).verticesIndicies).get_Item(1)));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(($hoisted02._ctor(+mapTile.index.x - 1, +mapTile.index.y - 1), 
                  $hoisted02)).verticesIndicies).get_Item(3)));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(($hoisted03._ctor(mapTile.index.x, +mapTile.index.y - 1), 
                  $hoisted03)).verticesIndicies).get_Item(2)));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, crossjoint.index));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(($hoisted04._ctor(+mapTile.index.x - 1, +mapTile.index.y - 1), 
                  $hoisted04)).verticesIndicies).get_Item(3)));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, crossjoint.index));
        $S07().CallVirtual("Add", null, list2, $S08().CallStatic($T1B(), "ToUInt16", null, ($thisType.tileIndicies.get_Item(($hoisted05._ctor(+mapTile.index.x - 1, mapTile.index.y), 
                  $hoisted05)).verticesIndicies).get_Item(1)));
      }
    }

    for (var m = 0; m < (list.get_Count() | 0); m = ((m + 1) | 0)) {
      $S05().CallVirtual("Add", null, list3, $S01().Construct((Math.fround($T08().random.NextDouble()) * 0.2), 1, (Math.fround($T08().random.NextDouble()) * 0.2)));
    }
    $S09().CallVirtual("Add", null, list4, $S00().Construct(0, 0));
    $S09().CallVirtual("Add", null, list4, $S00().Construct(1, 1));
    meshComponent.Vertices = $T16().prototype.ToArray.call(list);
    meshComponent.Triangles = $T17().prototype.ToArray.call(list2);
    meshComponent.Normals = $T16().prototype.ToArray.call(list3);
    meshComponent.UVs = $T18().prototype.ToArray.call(list4);
    return meshComponent;
  }; 

  function MapGenerator_generateSky () {
    var sceneNodeContainer = $T10().fusFiles.get_Item("360Sky");
    $T1E().GetMaterial(sceneNodeContainer, 0).Diffuse.Texture = $T10().textures.get_Item($T10().TEXTURE_SKY_FILES.get_Item($thisType._skyTextureId)).path;
    var key = $S00().Construct(+(((+(+$thisType.gridSize.x / 2)) | 0)), +(((+(+$thisType.gridSize.y / 2)) | 0)));
    $T1E().GetTransform(sceneNodeContainer, 0).Translation = $S0A().Construct(($thisType.tileIndicies.get_Item(key)).get_CenterPos());
    var num = +$thisType.mapSize * 0.5;
    $T1E().GetTransform(sceneNodeContainer, 0).Scale = $S01().Construct(num, num, num);
    return sceneNodeContainer;
  }; 

  function MapGenerator_generateTerrain (_numberOfHills) {
    var $hoisted00 = new ($T00())();

    for (var i = 0; i < (_numberOfHills | 0); i = ((i + 1) | 0)) {
      var gridPos = $thisType.randomGrid();
      var height = Math.fround($thisType.mapSize + (+$T08().random.NextDouble() * $thisType.mapSize)) * 2;
      var num = +((Math.fround($thisType.mapSize + (+$T08().random.NextDouble() * $thisType.mapSize)) / 1.5));
      $thisType.createHillAt(gridPos, height, ($hoisted00._ctor(num, num), 
          $hoisted00), false);
    }
  }; 

  function MapGenerator_generateTransform () {
    var transformComponent = new ($T1F())();
    transformComponent.Rotation = $T06().Zero.MemberwiseClone();
    transformComponent.Scale = $T06().One.MemberwiseClone();
    transformComponent.Translation = $T06().Zero.MemberwiseClone();
    return transformComponent;
  }; 

  function MapGenerator_getHighestTileInArea (_start, _end) {
    var key = new ($T00())();
    var mapTile = new ($T0A())($S00().Construct(-1, -1));
    (mapTile.CenterPos = $S01().Construct(-1, -1, -1));
    var float = $S00().Construct(Math.abs((+_start.x - +_end.x)), Math.abs((+_start.y - +_end.y)));

    for (var num = 0; +num < +float.x; num = ((num + 1) | 0)) {

      for (var num2 = 0; +num2 < +float.y; num2 = ((num2 + 1) | 0)) {
        (key = key.MemberwiseClone(), 
          $T00().prototype._ctor.call(key, +_start.x + +num, +_start.y + +num2));
        var y = +($thisType.tileIndicies.get_Item(key)).get_CenterPos().y;
        var flag = y > +mapTile.get_CenterPos().y;
        if (flag) {
          mapTile = $thisType.tileIndicies.get_Item(key);
        }
      }
    }
    return mapTile;
  }; 

  function MapGenerator_gridMapReturnZenitTiles (_grids) {
    var float = new ($T00())(), start = new ($T00())(), end = new ($T00())();
    var list = $S0B().Construct();
    float.x = +(((+(((+$thisType.gridSize.x + 1) - (+$thisType.nonPlayableAreaBounds.x * 2)) / +_grids)) | 0));
    float.y = +(((+(((+$thisType.gridSize.y + 1) - (+$thisType.nonPlayableAreaBounds.y * 2)) / +_grids)) | 0));

    for (var i = 0; i < (_grids | 0); i = ((i + 1) | 0)) {

      for (var j = 0; j < (_grids | 0); j = ((j + 1) | 0)) {
        (start = start.MemberwiseClone(), 
          $T00().prototype._ctor.call(start, +$thisType.nonPlayableAreaBounds.x + (+float.x * +i), +$thisType.nonPlayableAreaBounds.y + (+float.y * +j)));
        (end = end.MemberwiseClone(), 
          $T00().prototype._ctor.call(end, +$thisType.nonPlayableAreaBounds.x + (+float.x * +(i + 1)), +$thisType.nonPlayableAreaBounds.y + (+float.y * +(j + 1))));
        $S0C().CallVirtual("Add", null, list, $thisType.getHighestTileInArea(start.MemberwiseClone(), end.MemberwiseClone()));
      }
    }
    return list;
  }; 

  function MapGenerator_instantiatePlaneMap () {
    $thisType.tileIndicies = $S0D().Construct();
    var sceneNodeContainer = new ($T1C())();
    sceneNodeContainer.Children = $S0E().Construct();
    sceneNodeContainer.Components = $S0F().Construct();
    $thisType.mapSize = +(((18 * (+$thisType.gridSize.x + +$thisType.gridSize.y)) / 200));
    $thisType.nonPlayableAreaBounds = $S00().Construct(+(((+(+$thisType.gridSize.x / 5)) | 0)), +(((+(+$thisType.gridSize.y / 5)) | 0)));
    $S10().CallVirtual("Add", null, sceneNodeContainer.Components, $thisType.generateTransform());
    $S10().CallVirtual("Add", null, sceneNodeContainer.Components, $thisType.generateMaterial());
    $S10().CallVirtual("Add", null, sceneNodeContainer.Components, $thisType.generatePlainMapMesh());
    $S11().CallVirtual("Add", null, sceneNodeContainer.Children, $thisType.generateSky());
    return sceneNodeContainer;
  }; 

  function MapGenerator_nextTexture () {
    $thisType._mapTextureId = ((($thisType._mapTextureId | 0) + 1) | 0);
    $thisType._skyTextureId = ((($thisType._skyTextureId | 0) + 1) | 0);
    var flag = ($thisType._mapTextureId | 0) >= ($T10().TEXTURE_MAP_FILES.get_Count() | 0);
    if (flag) {
      $thisType._mapTextureId = 0;
    }
    var path = $T10().textures.get_Item($T10().TEXTURE_MAP_FILES.get_Item($thisType._mapTextureId)).path;
    $T1E().GetMaterial($T24().rootNodes.get_Item("mapRoot"), 0).Diffuse.Texture = path;
    var flag2 = ($thisType._skyTextureId | 0) >= ($T10().TEXTURE_SKY_FILES.get_Count() | 0);
    if (flag2) {
      $thisType._skyTextureId = 0;
    }
    path = $T10().textures.get_Item($T10().TEXTURE_SKY_FILES.get_Item($thisType._skyTextureId)).path;
    $T1E().GetMaterial(($T24().rootNodes.get_Item("mapRoot").Children).get_Item(0), 0).Diffuse.Texture = path;
  }; 

  function MapGenerator_randomGrid () {
    var result = $S00().Construct(+($T08().random.Next(0, ((+$thisType.gridSize.x + 1) | 0))), +($T08().random.Next(0, ((+$thisType.gridSize.y + 1) | 0))));
    return result;
  }; 

  function MapGenerator_randomGridInPlayableArea () {
    var result = $S00().Construct(+($T08().random.Next((($thisType.nonPlayableAreaBounds.x) | 0), ((((+$thisType.gridSize.x + 1) | 0) - (($thisType.nonPlayableAreaBounds.x) | 0)) | 0))), +($T08().random.Next((($thisType.nonPlayableAreaBounds.y) | 0), ((((+$thisType.gridSize.y + 1) | 0) - (($thisType.nonPlayableAreaBounds.y) | 0)) | 0))));
    return result;
  }; 

  function MapGenerator_translateTile (tile, translation, _isRenderTime) {
    var $temp00, $temp01;

    for (var a$0 = tile.verticesIndicies._items, i$0 = 0, l$0 = (tile.verticesIndicies._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var current = a$0[i$0];
      if (_isRenderTime) {
        $T25().translateVerticesOfMesh($T1E().GetMesh($T24().rootNodes.get_Item("mapRoot"), 0), current, translation);
      } else {
        $thisType.translateVertice(current, translation);
      }
    }
    (tile.CenterPos = $S01().Construct(tile.get_CenterPos().x, $T1E().GetMesh($T24().rootNodes.get_Item("mapRoot"), 0).Vertices[(tile.verticesIndicies).get_Item(0)].y, tile.get_CenterPos().z));
    $thisType.minMaxHeight = $S00().Construct($T0B().Min($thisType.minMaxHeight.x, tile.get_CenterPos().y), $T0B().Max($thisType.minMaxHeight.y, tile.get_CenterPos().y));

    for (var a$1 = tile.neighborJointsIndicies._items, i$1 = 0, l$1 = (tile.neighborJointsIndicies._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var current2 = a$1[i$1];
      if (_isRenderTime) {
        $T25().translateVerticesOfMesh(
          $T1E().GetMesh($T24().rootNodes.get_Item("mapRoot"), 0), 
          current2, 
          $S12().CallStatic($T06(), "op_Multiply", null, translation.MemberwiseClone(), 0.25)
        );
      } else {
        $thisType.translateVertice(current2, $S12().CallStatic($T06(), "op_Multiply", null, translation.MemberwiseClone(), 0.25));
      }
    }
  }; 

  function MapGenerator_translateVertice (_vertInd, translation) {
    var float = $T1E().GetMesh($T24().rootNodes.get_Item("mapRoot"), 0).Vertices[_vertInd].MemberwiseClone();
    (float = float.MemberwiseClone(), 
      $T06().prototype._ctor.call(float, +float.x + +translation.x, +float.y + +translation.y, +float.z + +translation.z));
    $T1E().GetMesh($T24().rootNodes.get_Item("mapRoot"), 0).Vertices[_vertInd] = float.MemberwiseClone();
  }; 

  JSIL.MakeStaticClass("Fusee.Tutorial.Core.MapGenerator", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "addHeightNoise", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Boolean
        ]), 
      MapGenerator_addHeightNoise
    );

    $.Method({Static:true , Public:true }, "createHillAt", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("Fusee.Math.Core.float2"), $.Single, 
          $asm06.TypeRef("Fusee.Math.Core.float2"), $.Boolean
        ]), 
      MapGenerator_createHillAt
    );

    $.Method({Static:true , Public:false}, "distanceBetweenGrids", 
      new JSIL.MethodSignature($.Single, [$asm06.TypeRef("Fusee.Math.Core.float2"), $asm06.TypeRef("Fusee.Math.Core.float2")]), 
      MapGenerator_distanceBetweenGrids
    );

    $.Method({Static:true , Public:false}, "generateMaterial", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Serialization.MaterialComponent")), 
      MapGenerator_generateMaterial
    );

    $.Method({Static:true , Public:false}, "generatePlainMapMesh", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Serialization.MeshComponent")), 
      MapGenerator_generatePlainMapMesh
    );

    $.Method({Static:true , Public:false}, "generateSky", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")), 
      MapGenerator_generateSky
    );

    $.Method({Static:true , Public:true }, "generateTerrain", 
      JSIL.MethodSignature.Action($.Int32), 
      MapGenerator_generateTerrain
    );

    $.Method({Static:true , Public:false}, "generateTransform", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Serialization.TransformComponent")), 
      MapGenerator_generateTransform
    );

    $.Method({Static:true , Public:false}, "getHighestTileInArea", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Tutorial.Core.MapTile"), [$asm06.TypeRef("Fusee.Math.Core.float2"), $asm06.TypeRef("Fusee.Math.Core.float2")]), 
      MapGenerator_getHighestTileInArea
    );

    $.Method({Static:true , Public:true }, "gridMapReturnZenitTiles", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Tutorial.Core.MapTile")]), [$.Int32]), 
      MapGenerator_gridMapReturnZenitTiles
    );

    $.Method({Static:true , Public:true }, "instantiatePlaneMap", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")), 
      MapGenerator_instantiatePlaneMap
    );

    $.Method({Static:true , Public:true }, "nextTexture", 
      JSIL.MethodSignature.Void, 
      MapGenerator_nextTexture
    );

    $.Method({Static:true , Public:false}, "randomGrid", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Fusee.Math.Core.float2")), 
      MapGenerator_randomGrid
    );

    $.Method({Static:true , Public:false}, "randomGridInPlayableArea", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Fusee.Math.Core.float2")), 
      MapGenerator_randomGridInPlayableArea
    );

    $.Method({Static:true , Public:true }, "translateTile", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Tutorial.Core.MapTile"), $asm06.TypeRef("Fusee.Math.Core.float3"), 
          $.Boolean
        ]), 
      MapGenerator_translateTile
    );

    $.Method({Static:true , Public:false}, "translateVertice", 
      new JSIL.MethodSignature(null, [$.Int32, $asm06.TypeRef("Fusee.Math.Core.float3")]), 
      MapGenerator_translateVertice
    );

    $.Field({Static:true , Public:true }, "tileIndicies", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm06.TypeRef("Fusee.Math.Core.float2"), $asm09.TypeRef("Fusee.Tutorial.Core.MapTile")]));

    $.Field({Static:true , Public:true }, "minMaxHeight", $asm06.TypeRef("Fusee.Math.Core.float2"));

    $.Field({Static:true , Public:false}, "mapSize", $.Single);

    $.Field({Static:true , Public:false}, "_mapTextureId", $.Int32);

    $.Field({Static:true , Public:false}, "_skyTextureId", $.Int32);

    $.Field({Static:true , Public:true }, "gridSize", $asm06.TypeRef("Fusee.Math.Core.float2"));

    $.Constant({Static:true , Public:true }, "tileSize", $.Single, 15);

    $.Constant({Static:true , Public:true }, "jointSize", $.Single, 3);

    $.Field({Static:true , Public:false}, "nonPlayableAreaBounds", $asm06.TypeRef("Fusee.Math.Core.float2"));


    function MapGenerator__cctor () {
      $thisType.minMaxHeight = new $asm06.Fusee.Math.Core.float2();
      $thisType.gridSize = new $asm06.Fusee.Math.Core.float2();
      $thisType.nonPlayableAreaBounds = new $asm06.Fusee.Math.Core.float2();
      $thisType.minMaxHeight = $S00().Construct(999, 0);
      $thisType.gridSize = $S00().Construct(100, 100);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MapGenerator__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.MapTile */ 

(function MapTile$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.Fusee.Math.Core.float2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm07.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm14.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm09.Fusee.Tutorial.Core.MapTile))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Serialization.SceneComponentContainer")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm14.TypeRef("System.Int32")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Tutorial.Core.MapTile")]), null))) ();
  };


  function MapTile__ctor (_index) {
    $T01().prototype._ctor.call(this);
    this.mountedBunker = null;
    this.index = _index.MemberwiseClone();
    this.Components = $S00().Construct();
    this.Children = $S01().Construct();
    this.neighborJointsIndicies = $S02().Construct();
    this.verticesIndicies = $S02().Construct();
    this.neighborMapTiles = $S03().Construct();
    this.Name = (JSIL.ConcatString.apply(null, JSIL.Array.New($T07(), ["Tile_", this.index.x, "-", this.index.y])));
  }; 

  function MapTile_get_CenterPos () {
    return this.centerPos;
  }; 

  function MapTile_set_CenterPos (value) {
    this.centerPos = value.MemberwiseClone();
    if (this.mountedBunker !== null) {
      this.mountedBunker.bunkerBase.Translation = this.centerPos.MemberwiseClone();
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Fusee.Serialization.SceneNodeContainer"), 
      Name: "Fusee.Tutorial.Core.MapTile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("Fusee.Math.Core.float2")), 
      MapTile__ctor
    );

    $.Method({Static:false, Public:true }, "get_CenterPos", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Fusee.Math.Core.float3")), 
      MapTile_get_CenterPos
    );

    $.Method({Static:false, Public:true }, "set_CenterPos", 
      JSIL.MethodSignature.Action($asm06.TypeRef("Fusee.Math.Core.float3")), 
      MapTile_set_CenterPos
    );

    $.Field({Static:false, Public:true }, "index", $asm06.TypeRef("Fusee.Math.Core.float2"));

    $.Field({Static:false, Public:false}, "centerPos", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "mountedBunker", $asm09.TypeRef("Fusee.Tutorial.Core.Assets.Bunker"));

    $.Field({Static:false, Public:true }, "neighborMapTiles", $asm14.TypeRef("System.Collections.Generic.List`1", [$.Type]));

    $.Field({Static:false, Public:true }, "verticesIndicies", $asm14.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:true }, "neighborJointsIndicies", $asm14.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "CenterPos", $asm06.TypeRef("Fusee.Math.Core.float3"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.Projectile */ 

(function Projectile$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.ContainerClone)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.AssetsManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.Fusee.Xene.ContainerExtensions)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.Fusee.Math.Core.float2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Math)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm06.Fusee.Math.Core.float2, $asm09.Fusee.Tutorial.Core.MapTile))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.Fusee.Tutorial.Core.MapGenerator)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.Fusee.Tutorial.Core.MapTile)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [$asm06.TypeRef("Fusee.Math.Core.float3"), $asm14.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float2"), [$asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single")
      ]))) ();
  };


  function Projectile__ctor (_id, _pos) {
    this.id = (_id | 0);
    this.weight = 1;
    this.velocity = $T01().One.MemberwiseClone();
    this.container = $T03().projectile.cloneContainer(_id);
    this.transform = $T04().GetTransform(this.container, 0);
    this.transform.Translation = _pos.MemberwiseClone();
    this.transform.Scale = $S00().CallStatic($T01(), "op_Multiply", null, $T01().One.MemberwiseClone(), 0.03);
  }; 

  function Projectile_isCollided () {
    var num = +((+this.transform.Translation.x / 18));
    var num2 = +((+this.transform.Translation.z / 18));
    var key = $S01().Construct(+(((Math.floor(num)) | 0)), +(((Math.floor(num2)) | 0)));
    var key2 = $S01().Construct(+(((Math.floor(num)) | 0)), +(((Math.floor(num2)) | 0)));
    var flag = $T0B().tileIndicies.ContainsKey(key.MemberwiseClone()) && 
    (+this.transform.Translation.y <= +($T0B().tileIndicies.get_Item(key)).get_CenterPos().y);
    if (flag) {
      var result = $T0B().tileIndicies.get_Item(key);
    } else {
      var flag2 = $T0B().tileIndicies.ContainsKey(key2.MemberwiseClone()) && 
      (+this.transform.Translation.y <= +($T0B().tileIndicies.get_Item(key2)).get_CenterPos().y);
      if (flag2) {
        result = $T0B().tileIndicies.get_Item(key2);
      } else {
        result = null;
      }
    }
    return result;
  }; 

  function Projectile_isOutOfMap () {
    return (+this.transform.Translation.y < 0);
  }; 

  function Projectile_update () {
    this.transform.Translation = $S02().Construct((+this.transform.Translation.x + +this.velocity.x), (+this.transform.Translation.y + +this.velocity.y), (+this.transform.Translation.z + +this.velocity.z));
    this.velocity = $S02().Construct(this.velocity.x, (+this.velocity.y + (-0.1 * +this.weight)), this.velocity.z);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.Projectile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm06.TypeRef("Fusee.Math.Core.float3")]), 
      Projectile__ctor
    );

    $.Method({Static:false, Public:true }, "isCollided", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Tutorial.Core.MapTile")), 
      Projectile_isCollided
    );

    $.Method({Static:false, Public:true }, "isOutOfMap", 
      JSIL.MethodSignature.Return($.Boolean), 
      Projectile_isOutOfMap
    );

    $.Method({Static:false, Public:true }, "update", 
      JSIL.MethodSignature.Void, 
      Projectile_update
    );

    $.Field({Static:false, Public:false}, "id", $.Int32);

    $.Field({Static:false, Public:false}, "weight", $.Single);

    $.Field({Static:false, Public:true }, "velocity", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "container", $asm07.TypeRef("Fusee.Serialization.SceneNodeContainer"));

    $.Field({Static:false, Public:true }, "transform", $asm07.TypeRef("Fusee.Serialization.TransformComponent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.Renderer */ 

(function Renderer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm07.Fusee.Serialization.MeshComponent, $asm04.Fusee.Engine.Core.Mesh))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.Fusee.Xene.CollapsingStateStack$b1.Of($asm06.Fusee.Math.Core.float4x4))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0B.Fusee.Xene.SceneVisitor)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm04.Fusee.Engine.Core.ShaderEffect))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm03.Fusee.Engine.Common.ITexture))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm14.System.String, $asm09.Fusee.Tutorial.Core.TextureImage))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm09.Fusee.Tutorial.Core.TextureImage))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.AssetsManager)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Collections.Generic.KeyValuePair$b2.Of($asm14.System.String, $asm09.Fusee.Tutorial.Core.TextureImage))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Fusee.Base.Common.ImageData)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectPassDeclaration))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectPassDeclaration)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm14.System.String))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderStateSet)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm03.Fusee.Engine.Common.Cull)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectParameterDeclaration)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm14.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.MapGenerator)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm06.Fusee.Math.Core.float4x4)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.Fusee.Serialization.MeshComponent)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm04.Fusee.Engine.Core.Mesh)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.Fusee.Serialization.MaterialComponent)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.Fusee.Serialization.TransformComponent)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0B.Fusee.Xene.ContainerExtensions)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm14.System.Random)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.Constants)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.Fusee.Base.Core.AssetStorage)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm03.Fusee.Engine.Common.ITexture)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("Fusee.Serialization.MeshComponent"), $asm04.TypeRef("Fusee.Engine.Core.Mesh")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm14.TypeRef("System.String"), $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm14.TypeRef("System.String"), $asm03.TypeRef("Fusee.Engine.Common.ITexture")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float4x4"), [$asm06.TypeRef("Fusee.Math.Core.float4x4"), $asm06.TypeRef("Fusee.Math.Core.float4x4")]))) ();
  };


  function Renderer__ctor (rc) {
    this._model = new ($T02())(4);
    $T03().prototype._ctor.call(this);
    this.RC = rc;
    this.shaderEffects = $S01().Construct();
    this._textures = $S02().Construct();
    var enumerator = $T07().prototype.GetEnumerator.call($T08().textures);

    while ($T06().prototype.MoveNext.call(enumerator)) {
      var current = $T06().prototype.get_Current.call(enumerator);
      var src = current.get_Value().src.MemberwiseClone();
      var name = current.get_Value().$name;
      this._textureValue = (this.RC).CreateTexture(src.MemberwiseClone(), false);
      (this._textures).Add(name, this._textureValue);
    }
    var expr_AE = JSIL.Array.New($T0D(), 1);
    var effectPassDeclaration = new ($T0D())();
    effectPassDeclaration.VS = $T08().shaders_vert.get_Item("VertexShader");
    effectPassDeclaration.PS = $T08().shaders_pix.get_Item("PixelShader");
    var expr_EB = new ($T0F())();
    expr_EB.set_ZEnable(true);
    expr_EB.set_CullMode($T10().Counterclockwise);
    effectPassDeclaration.StateSet = expr_EB;
    expr_AE[0] = effectPassDeclaration.MemberwiseClone();
    var expr_10D = JSIL.Array.New($T12(), 5);
    var effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "albedo";
    effectParameterDeclaration.Value = $T13().One.MemberwiseClone();
    expr_10D[0] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "shininess";
    effectParameterDeclaration.Value = $T14().$Box(1);
    expr_10D[1] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "specfactor";
    effectParameterDeclaration.Value = $T14().$Box(1);
    expr_10D[2] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "speccolor";
    effectParameterDeclaration.Value = $T13().Zero.MemberwiseClone();
    expr_10D[3] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "ambientcolor";
    effectParameterDeclaration.Value = $T13().Zero.MemberwiseClone();
    expr_10D[4] = effectParameterDeclaration.MemberwiseClone();
    this._shaderEffect = new ($T15())(expr_AE, $T16().$Cast(expr_10D));
    var expr_203 = JSIL.Array.New($T0D(), 1);
    effectPassDeclaration = new ($T0D())();
    effectPassDeclaration.VS = $T08().shaders_vert.get_Item("VertexShader_mountain");
    effectPassDeclaration.PS = $T08().shaders_pix.get_Item("PixelShader_mountains");
    var expr_240 = new ($T0F())();
    expr_240.set_ZEnable(true);
    expr_240.set_CullMode($T10().Counterclockwise);
    effectPassDeclaration.StateSet = expr_240;
    expr_203[0] = effectPassDeclaration.MemberwiseClone();
    var expr_263 = JSIL.Array.New($T12(), 13);
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "albedo";
    effectParameterDeclaration.Value = $T13().One.MemberwiseClone();
    expr_263[0] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "shininess";
    effectParameterDeclaration.Value = $T14().$Box(1);
    expr_263[1] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "specfactor";
    effectParameterDeclaration.Value = $T14().$Box(1);
    expr_263[2] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "speccolor";
    effectParameterDeclaration.Value = $T13().Zero.MemberwiseClone();
    expr_263[3] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "ambientcolor";
    effectParameterDeclaration.Value = $T13().One.MemberwiseClone();
    expr_263[4] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "ambientMix";
    effectParameterDeclaration.Value = $T14().$Box(1);
    expr_263[5] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "texmix";
    effectParameterDeclaration.Value = $T14().$Box(0);
    expr_263[6] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "texture";
    effectParameterDeclaration.Value = this._textureValue;
    expr_263[7] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "alpha";
    effectParameterDeclaration.Value = $T14().$Box(0);
    expr_263[8] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "waveHeight";
    effectParameterDeclaration.Value = $T14().$Box(0);
    expr_263[9] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "waveRoughnessX";
    effectParameterDeclaration.Value = $T14().$Box(0);
    expr_263[10] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "waveRoughnessY";
    effectParameterDeclaration.Value = $T14().$Box(0);
    expr_263[11] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "minMaxHeight";
    effectParameterDeclaration.Value = $T17().minMaxHeight.MemberwiseClone();
    expr_263[12] = effectParameterDeclaration.MemberwiseClone();
    var shaderEffect = new ($T15())(expr_203, $T16().$Cast(expr_263));
    var expr_4C5 = JSIL.Array.New($T0D(), 1);
    effectPassDeclaration = new ($T0D())();
    effectPassDeclaration.VS = $T08().shaders_vert.get_Item("VertexShader_texture");
    effectPassDeclaration.PS = $T08().shaders_pix.get_Item("PixelShader_texture");
    var expr_502 = new ($T0F())();
    expr_502.set_ZEnable(true);
    expr_502.set_CullMode($T10().Counterclockwise);
    effectPassDeclaration.StateSet = expr_502;
    expr_4C5[0] = effectPassDeclaration.MemberwiseClone();
    var expr_524 = JSIL.Array.New($T12(), 3);
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "albedo";
    effectParameterDeclaration.Value = $T13().One.MemberwiseClone();
    expr_524[0] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "texmix";
    effectParameterDeclaration.Value = $T14().$Box(0);
    expr_524[1] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "texture";
    effectParameterDeclaration.Value = this._textureValue;
    expr_524[2] = effectParameterDeclaration.MemberwiseClone();
    var shaderEffect2 = new ($T15())(expr_4C5, $T16().$Cast(expr_524));
    (this.shaderEffects).Add("Sky", shaderEffect2);
    (this.shaderEffects).Add("mapRoot", shaderEffect);
    (this._shaderEffect).AttachToContext(this.RC);
    shaderEffect2.AttachToContext(this.RC);
    shaderEffect.AttachToContext(this.RC);
    this.randomShaderEffects();
  }; 

  function Renderer_InitState () {
    (this._model).Clear();
    (this._model).set_Tos($T18().Identity.MemberwiseClone());
  }; 

  function Renderer_LookupMesh (mc) {
    var mesh = new JSIL.BoxedVariable(null);
    var flag = $thisType._meshes.TryGetValue(mc, /* ref */ mesh);
    if (flag) {
      var result = mesh.get();
    } else {
      var expr_1B = new ($T1A())();
      expr_1B.set_Vertices(mc.Vertices);
      expr_1B.set_Normals(mc.Normals);
      expr_1B.set_UVs(mc.UVs);
      expr_1B.set_Triangles(mc.Triangles);
      mesh.set(expr_1B);
      $thisType._meshes.set_Item(mc, mesh.get());
      result = mesh.get();
    }
    return result;
  }; 

  function Renderer_OnMaterial (material) {
    var shaderEffect = new JSIL.BoxedVariable(null);
    this.RenderMaterial(material, (
        (this.shaderEffects).TryGetValue(this.SceneVisitor$CurrentNode$value.Name, /* ref */ shaderEffect)
           ? shaderEffect.get()
           : this._shaderEffect)
    );
  }; 

  function Renderer_OnMesh (mesh) {
    var shaderEffect = new JSIL.BoxedVariable(null);
    var flag = (this.shaderEffects).TryGetValue(this.SceneVisitor$CurrentNode$value.Name, /* ref */ shaderEffect);
    if (flag) {
      (shaderEffect.get()).RenderMesh(this.LookupMesh(mesh));
    } else {
      (this._shaderEffect).RenderMesh(this.LookupMesh(mesh));
    }
  }; 

  function Renderer_OnTransform (xform) {
    this._model.Tos = $S03().CallStatic($T18(), "op_Multiply", null, this._model.Tos.MemberwiseClone(), $T1E().Matrix(xform).MemberwiseClone()).MemberwiseClone();
    (this.RC.ModelView = $S03().CallStatic($T18(), "op_Multiply", null, this.View.MemberwiseClone(), (this._model).get_Tos().MemberwiseClone()).MemberwiseClone());
  }; 

  function Renderer_PopState () {
    (this._model).Pop();
    (this.RC.ModelView = $S03().CallStatic($T18(), "op_Multiply", null, this.View.MemberwiseClone(), (this._model).get_Tos().MemberwiseClone()).MemberwiseClone());
  }; 

  function Renderer_PushState () {
    (this._model).Push();
  }; 

  function Renderer_randomShaderEffects () {
    ((this.shaderEffects).get_Item("mapRoot")).SetEffectParam("waveHeight", $T14().$Box(+($T20().random.Next(15, 50))));
    ((this.shaderEffects).get_Item("mapRoot")).SetEffectParam("waveRoughnessX", $T14().$Box((Math.fround($T20().random.NextDouble()) * 0.025)));
    ((this.shaderEffects).get_Item("mapRoot")).SetEffectParam("waveRoughnessY", $T14().$Box((Math.fround($T20().random.NextDouble()) * 0.025)));
  }; 

  function Renderer_RenderMaterial (material, shaderEffect) {
    var hasDiffuse = material.get_HasDiffuse();
    if (hasDiffuse) {
      shaderEffect.SetEffectParam("albedo", material.Diffuse.Color.MemberwiseClone());
      var flag = material.Diffuse.Texture !== null;
      if (flag) {
        var texture = material.Diffuse.Texture;
        var flag2 = !(this._textures).TryGetValue(texture, /* ref */ new JSIL.MemberReference(this, "_textureValue"));
        if (flag2) {
          var imgData = $T21().Get$b1($T0A())(material.Diffuse.Texture).MemberwiseClone();
          var value = (this.RC).CreateTexture(imgData.MemberwiseClone(), false);
          (this._textures).Add(texture, value);
        }
        (this._textures).TryGetValue(texture, /* ref */ new JSIL.MemberReference(this, "_textureValue"));
        shaderEffect.SetEffectParam("texture", this._textureValue);
        shaderEffect.SetEffectParam("texmix", material.Diffuse.Mix);
      } else {
        shaderEffect.SetEffectParam("texmix", $T14().$Box(0));
      }
    } else {
      shaderEffect.SetEffectParam("albedo", $T13().Zero.MemberwiseClone());
    }
    var hasSpecular = material.get_HasSpecular();
    if (hasSpecular) {
      shaderEffect.SetEffectParam("shininess", material.Specular.Shininess);
      shaderEffect.SetEffectParam("specfactor", material.Specular.Intensity);
      shaderEffect.SetEffectParam("speccolor", material.Specular.Color.MemberwiseClone());
    } else {
      shaderEffect.SetEffectParam("shininess", $T23().$Box(0));
      shaderEffect.SetEffectParam("specfactor", $T23().$Box(0));
      shaderEffect.SetEffectParam("speccolor", $T13().Zero.MemberwiseClone());
    }
    var hasEmissive = material.get_HasEmissive();
    if (hasEmissive) {
      shaderEffect.SetEffectParam("ambientcolor", material.Emissive.Color.MemberwiseClone());
      shaderEffect.SetEffectParam("ambientMix", material.Emissive.Mix);
    } else {
      shaderEffect.SetEffectParam("ambientcolor", $T13().Zero.MemberwiseClone());
    }
  }; 

  function Renderer_translateVerticesOfMesh (_comp, _vertInd, _trans) {
    var mesh = new JSIL.BoxedVariable(null);
    $thisType._meshes.TryGetValue(_comp, /* ref */ mesh);
    var expr_14 = new ($T1A())();
    expr_14.set_Vertices(_comp.Vertices);
    expr_14.set_Normals(_comp.Normals);
    expr_14.set_UVs(_comp.UVs);
    expr_14.set_Triangles(_comp.Triangles);
    mesh.set(expr_14);
    var float = (mesh.get()).get_Vertices()[_vertInd].MemberwiseClone();
    (float = float.MemberwiseClone(), 
      $T13().prototype._ctor.call(float, +float.x + +_trans.x, +float.y + +_trans.y, +float.z + +_trans.z));
    mesh.get().Vertices[_vertInd] = float.MemberwiseClone();
    $thisType._meshes.set_Item(_comp, mesh.get());
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Xene.SceneVisitor"), 
      Name: "Fusee.Tutorial.Core.Renderer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      Renderer__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "InitState", 
      JSIL.MethodSignature.Void, 
      Renderer_InitState
    );

    $.Method({Static:false, Public:false}, "LookupMesh", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Mesh"), [$asm07.TypeRef("Fusee.Serialization.MeshComponent")]), 
      Renderer_LookupMesh
    );

    $.Method({Static:false, Public:true }, "OnMaterial", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Serialization.MaterialComponent")), 
      Renderer_OnMaterial
    )
      .Attribute($asm0B.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "OnMesh", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Serialization.MeshComponent")), 
      Renderer_OnMesh
    )
      .Attribute($asm0B.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "OnTransform", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Serialization.TransformComponent")), 
      Renderer_OnTransform
    )
      .Attribute($asm0B.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "PopState", 
      JSIL.MethodSignature.Void, 
      Renderer_PopState
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PushState", 
      JSIL.MethodSignature.Void, 
      Renderer_PushState
    );

    $.Method({Static:false, Public:true }, "randomShaderEffects", 
      JSIL.MethodSignature.Void, 
      Renderer_randomShaderEffects
    );

    $.Method({Static:false, Public:false}, "RenderMaterial", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Serialization.MaterialComponent"), $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]), 
      Renderer_RenderMaterial
    );

    $.Method({Static:true , Public:true }, "translateVerticesOfMesh", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Fusee.Serialization.MeshComponent"), $.Int32, 
          $asm06.TypeRef("Fusee.Math.Core.float3")
        ]), 
      Renderer_translateVerticesOfMesh
    );

    $.Field({Static:false, Public:true }, "RC", $asm04.TypeRef("Fusee.Engine.Core.RenderContext"));

    $.Field({Static:false, Public:true }, "View", $asm06.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:true , Public:false}, "_meshes", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("Fusee.Serialization.MeshComponent"), $asm04.TypeRef("Fusee.Engine.Core.Mesh")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_model", $asm0B.TypeRef("Fusee.Xene.CollapsingStateStack`1", [$asm06.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_textures", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm03.TypeRef("Fusee.Engine.Common.ITexture")]));

    $.Field({Static:false, Public:true }, "shaderEffects", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]));

    $.Field({Static:false, Public:false}, "_textureValue", $asm03.TypeRef("Fusee.Engine.Common.ITexture"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_shaderEffect", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));


    function Renderer__cctor () {
      $thisType._meshes = $S00().Construct();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Renderer__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.SceneManager */ 

(function SceneManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.Fusee.Math.Core.float4x4)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.Fusee.Serialization.SceneContainer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.Fusee.Serialization.SceneHeader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm07.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.Fusee.Serialization.TransformComponent)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm11.System.Linq.Enumerable)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0B.Fusee.Xene.SceneFinderExtensions)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Predicate$b1.Of($asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float4x4"), [$asm14.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm14.TypeRef("System.String"), $asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Serialization.SceneComponentContainer")]), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Serialization.SceneComponentContainer")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), [$asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), $asm14.TypeRef("System.Predicate`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")])]))) ();
  };


  function SceneManager_addRootNode (_name, _node) {
    _node.Name = _name;
    $thisType.rootNodes.Add(_name, _node);
    $S01().CallVirtual("Add", null, $thisType.scene.Children, $thisType.rootNodes.get_Item(_name));
  }; 

  function SceneManager_createEmpty () {
    $thisType.scene = new ($T05())();
    $thisType.scene.Children = $S02().Construct();
    $thisType.scene.Header = new ($T06())();
    $thisType.rootNodes = $S03().Construct();
  }; 

  function SceneManager_createEmptySceneNode (_name, _hasChildren) {
    var sceneNodeContainer = new ($T02())();
    sceneNodeContainer.Components = $S04().Construct();
    var transformComponent = new ($T09())();
    transformComponent.Translation = $T0A().Zero.MemberwiseClone();
    transformComponent.Rotation = $T0A().Zero.MemberwiseClone();
    transformComponent.Scale = $T0A().One.MemberwiseClone();
    $S05().CallVirtual("Add", null, sceneNodeContainer.Components, transformComponent);
    sceneNodeContainer.Name = _name;
    if (_hasChildren) {
      sceneNodeContainer.Children = $S02().Construct();
    }
    return sceneNodeContainer;
  }; 

  function SceneManager_destroyNode$b1 (T, _node, _name) {
    var $s00 = new JSIL.MethodSignature($asm14.System.Boolean, [$asm07.Fusee.Serialization.SceneNodeContainer]);
    var $closure0 = new ($asm09.Fusee.Tutorial.Core.SceneManager_$l$gc__DisplayClass5_0$b1.Of(T)) ();
    $closure0._name = _name;
    var sceneNodeContainer = JSIL.CloneParameter(T, $T02().$Cast(_node));
    var item = $S06().CallStatic($T0C(), "First$b1", [$asm07.Fusee.Serialization.SceneNodeContainer], $S07().CallStatic($T0D(), "FindNodes", null, sceneNodeContainer.Children, $T0E().New($closure0, null, new JSIL.MethodPointerInfo($asm09.Fusee.Tutorial.Core.SceneManager_$l$gc__DisplayClass5_0$b1.Of(T), "$ldestroyNode$gb__0", $s00, false, false))));
    (sceneNodeContainer.Children).RemoveAt((sceneNodeContainer.Children).IndexOf(item));
  }; 

  JSIL.MakeStaticClass("Fusee.Tutorial.Core.SceneManager", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "addRootNode", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), 
      SceneManager_addRootNode
    );

    $.Method({Static:true , Public:true }, "createEmpty", 
      JSIL.MethodSignature.Void, 
      SceneManager_createEmpty
    );

    $.Method({Static:true , Public:true }, "createEmptySceneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("Fusee.Serialization.SceneNodeContainer"), [$.String, $.Boolean]), 
      SceneManager_createEmptySceneNode
    );

    $.Method({Static:true , Public:true }, "destroyNode", 
      new JSIL.MethodSignature(null, ["!!0", $.String], ["T"]), 
      SceneManager_destroyNode$b1
    );

    $.Field({Static:true , Public:true }, "scene", $asm07.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:true , Public:true }, "rootNodes", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]));

    $.Field({Static:true , Public:true }, "sceneScale", $asm06.TypeRef("Fusee.Math.Core.float4x4"));


    function SceneManager__cctor () {
      $thisType.sceneScale = new $asm06.Fusee.Math.Core.float4x4();
      $thisType.sceneScale = $S00().CallStatic($T00(), "CreateScale", null, 1).MemberwiseClone();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SceneManager__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.SceneManager+<>c__DisplayClass5_0`1 */ 

(function $l$gc__DisplayClass5_0$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.String)) ();
  };


  function $l$gc__DisplayClass5_0$b1__ctor () {
  }; 

  function $l$gc__DisplayClass5_0$b1_$ldestroyNode$gb__0 (c) {
    return c.Name == this._name;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.SceneManager+<>c__DisplayClass5_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass5_0$b1__ctor
    );

    $.Method({Static:false, Public:false}, "$ldestroyNode$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), 
      $l$gc__DisplayClass5_0$b1_$ldestroyNode$gb__0
    );

    $.Field({Static:false, Public:true }, "_name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Fusee.Tutorial.Core.TextureImage */ 

(function TextureImage$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Fusee.Base.Common.ImageData)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.String)) ();
  };


  function TextureImage__ctor (_src, _name, _path) {
    this.src = _src.MemberwiseClone();
    this.$name = _name;
    this.path = _path;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.TextureImage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Fusee.Base.Common.ImageData"), $.String, 
          $.String
        ]), 
      TextureImage__ctor
    );

    $.Field({Static:false, Public:true }, "src", $asm00.TypeRef("Fusee.Base.Common.ImageData"));

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "path", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.Tutorial */ 

(function Tutorial$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderCanvas)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.Bunker)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm09.Fusee.Tutorial.Core.Assets.Bunker))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.MouseDevice)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.Input)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Projectile)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm09.Fusee.Tutorial.Core.Projectile))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.Fusee.Tutorial.Core.SceneManager)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.KeyboardDevice)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm03.Fusee.Engine.Common.KeyCodes)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.Fusee.Tutorial.Core.MapGenerator)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Renderer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.AssetsManager)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Camera)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.Fusee.Math.Core.float4x4)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.Fusee.Math.Core.float4)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm14.System.Math)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm11.System.Linq.Enumerable)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm09.Fusee.Tutorial.Core.MapTile))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm14.System.Random)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.Constants)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm09.Fusee.Tutorial.Core.MapTile)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm06.Fusee.Math.Core.float2)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm03.Fusee.Engine.Common.ClearFlags)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm07.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm04.Fusee.Engine.Core.ShaderEffect))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0B.Fusee.Xene.SceneVisitor)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Tutorial.Core.Projectile")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float4"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm0D.TypeRef("System.Int32"), [$asm0D.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Tutorial.Core.Assets.Bunker")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Tutorial.Core.Projectile")]), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Tutorial.Core.Assets.Bunker")]), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float2"), [$asm06.TypeRef("Fusee.Math.Core.float2"), $asm14.TypeRef("System.Single")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float4x4"), [$asm06.TypeRef("Fusee.Math.Core.float4x4"), $asm06.TypeRef("Fusee.Math.Core.float4x4")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(JSIL.MethodSignature.Action($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")])))) ();
  };


  function Tutorial__ctor () {
    this.numberOfPlayers = 6;
    this.activePlayerId = 0;
    $T00().prototype._ctor.call(this);
  }; 

  function Tutorial_handleInputControls () {
    var bunker = (this.players).get_Item(this.activePlayerId);
    var flag = $T05().get_Mouse().get_LeftButton() && 
    ((bunker.ammo | 0) > 0);
    if (flag) {
      var projectile = bunker.shootProjectile();
      $S00().CallVirtual("Add", null, this.projectiles, projectile);
      $S01().CallVirtual("Add", null, $T0A().rootNodes.get_Item("projectileRoot").Children, projectile.container);
      bunker.ammo = (((bunker.ammo | 0) - 1) | 0);
    } else {
      var flag2 = $T05().get_Keyboard().IsKeyDown($T0C().Space);
      if (flag2) {
        $T0D().nextTexture();
      } else {
        var flag3 = $T05().get_Keyboard().IsKeyDown($T0C().Enter);
        if (flag3) {
          this.newGame();
          (this._renderer).randomShaderEffects();
        }
      }
    }
    bunker.rotatePlatform($T05().get_Mouse().get_XVel());
    bunker.liftCannon($T05().get_Mouse().get_YVel());
    this.cam.Rotation = $S02().Construct((-bunker.bunkerCannon.Rotation.z - 4.712389), (-bunker.bunkerPlatform.Rotation.y - 4.712389), 0);
  }; 

  function Tutorial_Init () {
    $T10().loadGameAssets();
    this.cam = new ($T11())();
    this.cam.projection = $T12().CreatePerspectiveFieldOfView(
      (this.cam).get_FieldOfView(), 
      +((+(this.get_Width()) / +(this.get_Height()))), 
      0.01, 
      20
    ).MemberwiseClone();
    this.newGame();
    this._renderer = new ($T0E())(this.RenderCanvas$RC$value);
    (this.RenderCanvas$RC$value.ClearColor = $S03().Construct(0.8, 0.8, 1, 1));
  }; 

  function Tutorial_loadPlayers (numberOfPlayers) {
    numberOfPlayers = ($T16().Max(1, numberOfPlayers) | 0);
    numberOfPlayers = ($T16().Min($S04().CallStatic($T18(), "Count$b1", [$asm14.System.String], $T10().FUS_BUNKER_FILES), numberOfPlayers) | 0);

    for (var i = 0; i < (numberOfPlayers | 0); i = ((i + 1) | 0)) {
      var item = new ($T01())($T10().FUS_BUNKER_FILES[i]);
      $S05().CallVirtual("Add", null, this.players, item);
      $S01().CallVirtual("Add", null, $T0A().rootNodes.get_Item("bunkerRoot").Children, (this.players).get_Item(i).scene);
    }
  }; 

  function Tutorial_newGame () {
    var $temp00;
    $T0A().createEmpty();
    $T0A().addRootNode("mapRoot", $T0D().instantiatePlaneMap());
    $T0A().addRootNode("bunkerRoot", $T0A().createEmptySceneNode("", true));
    $T0A().addRootNode("projectileRoot", $T0A().createEmptySceneNode("", true));
    $T0D().generateTerrain(Math.imul(12, this.numberOfPlayers));
    this.projectiles = $S06().Construct();
    this.players = $S07().Construct();
    this.loadPlayers(this.numberOfPlayers);
    var grids = ($T16().Max(((Math.ceil(+(+((this.players).get_Count()) / 2))) | 0), 2) | 0);
    var list = $T0D().gridMapReturnZenitTiles(grids);

    for (var a$0 = this.players._items, i$0 = 0, l$0 = (this.players._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var current = a$0[i$0];
      var index = ($T1C().random.Next(0, list.get_Count()) | 0);
      current.mountBunkerOnTile(list.get_Item(index));
      list.RemoveAt(index);
    }
    (this.cam).mountCameraOnBunker((this.players).get_Item(this.activePlayerId));
    this.turnTime = 100;
    this.turnEnded = false;
  }; 

  function Tutorial_nextPlayersTurn () {
    this.activePlayerId = (((this.activePlayerId | 0) + 1) | 0);
    var flag = (this.activePlayerId | 0) >= ((this.players).get_Count() | 0);
    if (flag) {
      this.activePlayerId = 0;
    }
    (this.players).get_Item(this.activePlayerId).ammo = 1;
    (this.cam).mountCameraOnBunker((this.players).get_Item(this.activePlayerId));
  }; 

  function Tutorial_projectileHitTile (_tile, _radius, _strength) {
    $T0D().createHillAt(_tile.index, -_strength, $S08().CallStatic($T1F(), "op_Multiply", null, $T1F().One.MemberwiseClone(), _radius), true);
  }; 

  function Tutorial_RenderAFrame () {
    (this.RenderCanvas$RC$value).Clear($T20().$Flags("Color", "Depth"));
    this.handleInputControls();

    for (var i = 0; i < ((this.projectiles).get_Count() | 0); i = ((i + 1) | 0)) {
      ((this.projectiles).get_Item(i)).update();
      var mapTile = ((this.projectiles).get_Item(i)).isCollided();
      if (((this.projectiles).get_Item(i)).isOutOfMap()) {
        $T0A().destroyNode$b1($T21())(
          $T0A().rootNodes.get_Item("projectileRoot"), 
          (this.projectiles).get_Item(i).container.Name
        );
        (this.projectiles).RemoveAt(i);
        this.turnEnded = true;
      } else {
        if (mapTile !== null) {
          this.projectileHitTile(mapTile, 8, 50);
          $T0A().destroyNode$b1($T21())(
            $T0A().rootNodes.get_Item("projectileRoot"), 
            (this.projectiles).get_Item(i).container.Name
          );
          (this.projectiles).RemoveAt(i);
          this.turnEnded = true;
        }
      }
    }
    if ((this.turnTime | 0) < 0) {
      this.turnTime = 100;
      this.turnEnded = false;
      this.nextPlayersTurn();
    }
    var flag4 = this.turnEnded;
    if (flag4) {
      this.turnTime = (((this.turnTime | 0) - 1) | 0);
    }
    var num = $T1E().$Cast(((this._renderer.shaderEffects).get_Item("mapRoot")).GetEffectParam("alpha")) + 1.8;
    ((this._renderer.shaderEffects).get_Item("mapRoot")).SetEffectParam("alpha", $T1E().$Box(num));
    (this.cam).update();
    var float4x = $S09().CallStatic($T12(), "op_Multiply", null, $S09().CallStatic($T12(), "op_Multiply", null, 
        $S09().CallStatic($T12(), "op_Multiply", null, 
          (this.cam).get_MtxPivot().MemberwiseClone(), 
          (this.cam).get_MtxRot().MemberwiseClone()
        ).MemberwiseClone(), 
        (this.cam).get_MtxOffset().MemberwiseClone()
      ).MemberwiseClone(), $T0A().sceneScale.MemberwiseClone()).MemberwiseClone();
    this._renderer.View = float4x.MemberwiseClone();
    (this.RenderCanvas$RC$value.ModelView = float4x.MemberwiseClone());
    (this.RenderCanvas$RC$value.Projection = this.cam.projection.MemberwiseClone());
    $S0A().CallVirtual("Traverse", null, this._renderer, $T0A().scene.Children);
    this.Present();
  }; 

  function Tutorial_Resize () {
    (this.RenderCanvas$RC$value).Viewport(
      0, 
      0, 
      this.get_Width(), 
      this.get_Height()
    );
    var aspect = +((+(this.get_Width()) / +(this.get_Height())));
    this.cam.projection = $T12().CreatePerspectiveFieldOfView((this.cam).get_FieldOfView(), aspect, 1, 20000).MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.RenderCanvas"), 
      Name: "Fusee.Tutorial.Core.Tutorial", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Tutorial__ctor
    );

    $.Method({Static:false, Public:false}, "handleInputControls", 
      JSIL.MethodSignature.Void, 
      Tutorial_handleInputControls
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Tutorial_Init
    );

    $.Method({Static:false, Public:true }, "loadPlayers", 
      JSIL.MethodSignature.Action($.Int32), 
      Tutorial_loadPlayers
    );

    $.Method({Static:false, Public:false}, "newGame", 
      JSIL.MethodSignature.Void, 
      Tutorial_newGame
    );

    $.Method({Static:false, Public:false}, "nextPlayersTurn", 
      JSIL.MethodSignature.Void, 
      Tutorial_nextPlayersTurn
    );

    $.Method({Static:false, Public:false}, "projectileHitTile", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Tutorial.Core.MapTile"), $.Single, 
          $.Single
        ]), 
      Tutorial_projectileHitTile
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RenderAFrame", 
      JSIL.MethodSignature.Void, 
      Tutorial_RenderAFrame
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Resize", 
      JSIL.MethodSignature.Void, 
      Tutorial_Resize
    );

    $.Field({Static:false, Public:false}, "_twoTouchRep", $.Boolean);

    $.Field({Static:false, Public:false}, "_renderer", $asm09.TypeRef("Fusee.Tutorial.Core.Renderer"));

    $.Field({Static:false, Public:false}, "cam", $asm09.TypeRef("Fusee.Tutorial.Core.Camera"));

    $.Field({Static:false, Public:false}, "players", $asm14.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Tutorial.Core.Assets.Bunker")]));

    $.Field({Static:false, Public:false}, "projectiles", $asm14.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Tutorial.Core.Projectile")]));

    $.Field({Static:false, Public:false}, "numberOfPlayers", $.Int32);

    $.Field({Static:false, Public:false}, "activePlayerId", $.Int32);

    $.Field({Static:false, Public:false}, "turnTime", $.Int32);

    $.Field({Static:false, Public:false}, "turnEnded", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("Fusee.Engine.Common.FuseeApplicationAttribute"));

})();

JSIL.DeclareNamespace("Fusee.Tutorial.Core.Assets");
/* class Fusee.Tutorial.Core.Assets.AssetsManager */ 

(function AssetsManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm14.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.AssetsManager_FILE_TYPE)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Fusee.Base.Core.AssetStorage)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm09.Fusee.Tutorial.Core.TextureImage))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm14.System.String))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm14.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.Fusee.Serialization.SceneContainer)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Fusee.Base.Common.ImageData)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.Fusee.Tutorial.Core.TextureImage)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.ContainerClone)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm14.TypeRef("System.String")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm14.TypeRef("System.String"), $asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm14.TypeRef("System.String"), $asm09.TypeRef("Fusee.Tutorial.Core.TextureImage")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]), null))) ();
  };


  function AssetsManager_loadAsset$b1 (T, _type, _filename) {
    var id = "";
    switch (_type.valueOf()) {
      case 0: 
        id = (("Textures/Sky/" + _filename + ".fus"));
        break;

      case 1: 
        id = (("Fus/" + _filename + ".fus"));
        break;

      case 2: 
        id = (("Shaders/" + _filename + ".vert"));
        break;

      case 3: 
        id = (("Shaders/" + _filename + ".frag"));
        break;

      case 4: 
        id = (("Fus/Bunkers/" + _filename + ".fus"));
        break;

      case 5: 
        id = (("Textures/Landscape/" + _filename + ".png"));
        break;

    }
    return $T04().Get$b1(T)(id);
  }; 

  function AssetsManager_loadGameAssets () {
    var $temp00, $temp01, $temp02, $temp03;
    $thisType.fusFiles = $S02().Construct();
    $thisType.textures = $S03().Construct();
    $thisType.shaders_pix = $S04().Construct();
    $thisType.shaders_vert = $S04().Construct();
    var fUS_BUNKER_FILES = $thisType.FUS_BUNKER_FILES;

    for (var i = 0; i < (fUS_BUNKER_FILES.length | 0); i = ((i + 1) | 0)) {
      var text = fUS_BUNKER_FILES[i];
      var sceneNodeContainer = ($thisType.loadAsset$b1($T0C())($T03().FUS_BUNKER, text).Children).get_Item(0);
      $thisType.renameNodesRecursively(sceneNodeContainer, "", JSIL.ConcatString("_", text));
      $thisType.fusFiles.Add(text, sceneNodeContainer);
    }
    var fUS_SKY_FILES = $thisType.FUS_SKY_FILES;

    for (var j = 0; j < (fUS_SKY_FILES.length | 0); j = ((j + 1) | 0)) {
      var text2 = fUS_SKY_FILES[j];
      $thisType.fusFiles.Add(text2, ($thisType.loadAsset$b1($T0C())($T03().FUS_DIVERSE, text2).Children).get_Item(0));
    }

    for (var a$0 = $thisType.TEXTURE_SKY_FILES._items, i$0 = 0, l$0 = ($thisType.TEXTURE_SKY_FILES._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var current = a$0[i$0];
      var src = $thisType.loadAsset$b1($T0D())($T03().TEXTURE_SKY, current);
      var path = (("Textures/Sky/" + current + ".png"));
      var value = new ($T0E())(src.MemberwiseClone(), current, path);
      $thisType.textures.Add(current, value);
    }

    for (var a$1 = $thisType.TEXTURE_MAP_FILES._items, i$1 = 0, l$1 = ($thisType.TEXTURE_MAP_FILES._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var current2 = a$1[i$1];
      var src2 = $thisType.loadAsset$b1($T0D())($T03().TEXTURE_MAP, current2);
      var path2 = (("Textures/Landscape/" + current2 + ".png"));
      var value2 = new ($T0E())(src2.MemberwiseClone(), current2, path2);
      $thisType.textures.Add(current2, value2);
    }

    for (var a$2 = $thisType.SHADER_PIX_FILES._items, i$2 = 0, l$2 = ($thisType.SHADER_PIX_FILES._size | 0); i$2 < l$2; ($temp02 = i$2, 
        i$2 = ((i$2 + 1) | 0), 
        $temp02)) {
      var current3 = a$2[i$2];
      $thisType.shaders_pix.Add(current3, $thisType.loadAsset$b1($T01())($T03().SHADER_PIX, current3));
    }

    for (var a$3 = $thisType.SHADER_VERT_FILES._items, i$3 = 0, l$3 = ($thisType.SHADER_VERT_FILES._size | 0); i$3 < l$3; ($temp03 = i$3, 
        i$3 = ((i$3 + 1) | 0), 
        $temp03)) {
      var current4 = a$3[i$3];
      $thisType.shaders_vert.Add(current4, $thisType.loadAsset$b1($T01())($T03().SHADER_VERT, current4));
    }
    var fUS_DIVERSE_FILES = $thisType.FUS_DIVERSE_FILES;

    for (var k = 0; k < (fUS_DIVERSE_FILES.length | 0); k = ((k + 1) | 0)) {
      var text3 = fUS_DIVERSE_FILES[k];
      $thisType.fusFiles.Add(text3, ($thisType.loadAsset$b1($T0C())($T03().FUS_DIVERSE, text3).Children).get_Item(0));
    }
    $thisType.projectile = new ($T0F())($thisType.FUS_DIVERSE_FILES[0]);
  }; 

  function AssetsManager_renameNodesRecursively (elem, _prefix, _appendix) {
    var $temp00;
    elem.Name = ((_prefix + elem.Name + _appendix));
    var flag = (elem.Children !== null) && 
    (((elem.Children).get_Count() | 0) > 0);
    if (flag) {

      for (var a$0 = elem.Children._items, i$0 = 0, l$0 = (elem.Children._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var current = a$0[i$0];
        $thisType.renameNodesRecursively(current, _prefix, _appendix);
      }
    }
  }; 

  JSIL.MakeStaticClass("Fusee.Tutorial.Core.Assets.AssetsManager", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "loadAsset", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("Fusee.Tutorial.Core.Assets.AssetsManager+FILE_TYPE"), $.String], ["T"]), 
      AssetsManager_loadAsset$b1
    );

    $.Method({Static:true , Public:true }, "loadGameAssets", 
      JSIL.MethodSignature.Void, 
      AssetsManager_loadGameAssets
    );

    $.Method({Static:true , Public:true }, "renameNodesRecursively", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Fusee.Serialization.SceneNodeContainer"), $.String, 
          $.String
        ]), 
      AssetsManager_renameNodesRecursively
    );

    $.Constant({Static:true , Public:false}, "TEXTURE_SKY_FILEPATH", $.String, "Textures/Sky/");

    $.Constant({Static:true , Public:false}, "TEXTURE_MAPS_FILEPATH", $.String, "Textures/Landscape/");

    $.Constant({Static:true , Public:false}, "SHADERS_FILEPATH", $.String, "Shaders/");

    $.Constant({Static:true , Public:false}, "FUS_BUNKERS_FILEPATH", $.String, "Fus/Bunkers/");

    $.Constant({Static:true , Public:false}, "FUS_ROOT_FILEPATH", $.String, "Fus/");

    $.Field({Static:true , Public:false, ReadOnly:true }, "SHADER_VERT_FILES", $asm14.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SHADER_PIX_FILES", $asm14.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "TEXTURE_MAP_FILES", $asm14.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "TEXTURE_SKY_FILES", $asm14.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "FUS_BUNKER_FILES", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "FUS_SKY_FILES", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "FUS_DIVERSE_FILES", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:true }, "fusFiles", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]));

    $.Field({Static:true , Public:true }, "textures", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm09.TypeRef("Fusee.Tutorial.Core.TextureImage")]));

    $.Field({Static:true , Public:true }, "shaders_pix", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:true }, "shaders_vert", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:true }, "projectile", $asm09.TypeRef("Fusee.Tutorial.Core.Assets.ContainerClone"));


    function AssetsManager__cctor () {
      var expr_05 = $S00().Construct();
      $S01().CallVirtual("Add", null, expr_05, "VertexShader");
      $S01().CallVirtual("Add", null, expr_05, "VertexShader_mountain");
      $S01().CallVirtual("Add", null, expr_05, "VertexShader_texture");
      $thisType.SHADER_VERT_FILES = expr_05;
      var expr_33 = $S00().Construct();
      $S01().CallVirtual("Add", null, expr_33, "PixelShader");
      $S01().CallVirtual("Add", null, expr_33, "PixelShader_mountains");
      $S01().CallVirtual("Add", null, expr_33, "PixelShader_texture");
      $thisType.SHADER_PIX_FILES = expr_33;
      var expr_61 = $S00().Construct();
      $S01().CallVirtual("Add", null, expr_61, "mountainsTexture_3");
      $S01().CallVirtual("Add", null, expr_61, "mountainsTexture_0");
      $S01().CallVirtual("Add", null, expr_61, "mountainsTexture_4");
      $thisType.TEXTURE_MAP_FILES = expr_61;
      var expr_8F = $S00().Construct();
      $S01().CallVirtual("Add", null, expr_8F, "sky_6");
      $S01().CallVirtual("Add", null, expr_8F, "sky_8");
      $thisType.TEXTURE_SKY_FILES = expr_8F;
      $thisType.FUS_BUNKER_FILES = JSIL.Array.New($T01(), ["Bunker_white", "Bunker_pink", "Bunker_yellow", "Bunker_green", "Bunker_blue", "Bunker_red"]);
      $thisType.FUS_SKY_FILES = JSIL.Array.New($T01(), ["360Sky"]);
      $thisType.FUS_DIVERSE_FILES = JSIL.Array.New($T01(), ["projectile"]);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      AssetsManager__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Tutorial.Core.Assets.AssetsManager+FILE_TYPE */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Tutorial.Core.Assets.AssetsManager+FILE_TYPE", 
    BaseType: $asm14.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    TEXTURE_SKY: 0, 
    FUS_DIVERSE: 1, 
    SHADER_VERT: 2, 
    SHADER_PIX: 3, 
    FUS_BUNKER: 4, 
    TEXTURE_MAP: 5, 
  }
);

/* class Fusee.Tutorial.Core.Assets.Constants */ 

(function Constants$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Random)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.Fusee.Math.Core.float2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Math)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Random"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float2"), [$asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single")]))) ();
  };


  function Constants_angleToVector (_angle) {
    var result = $S01().Construct(Math.fround(Math.cos(_angle)), -Math.fround(Math.sin(_angle)));
    return result;
  }; 

  function Constants_degreeToRadian (degree) {
    return Math.fround(+((3.1415926535897931 * +degree) / 180));
  }; 

  function Constants_radianToDegree (radian) {
    return Math.fround(+radian * 57.295779513082323);
  }; 

  function Constants_vectorToAngle (_vector) {
    return Math.fround(Math.atan2(_vector.x, -_vector.y));
  }; 

  JSIL.MakeStaticClass("Fusee.Tutorial.Core.Assets.Constants", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "angleToVector", 
      new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float2"), [$.Single]), 
      Constants_angleToVector
    );

    $.Method({Static:true , Public:true }, "degreeToRadian", 
      new JSIL.MethodSignature($.Single, [$.Double]), 
      Constants_degreeToRadian
    );

    $.Method({Static:true , Public:true }, "radianToDegree", 
      new JSIL.MethodSignature($.Double, [$.Double]), 
      Constants_radianToDegree
    );

    $.Method({Static:true , Public:true }, "vectorToAngle", 
      new JSIL.MethodSignature($.Single, [$asm06.TypeRef("Fusee.Math.Core.float2")]), 
      Constants_vectorToAngle
    );

    $.Constant({Static:true , Public:true }, "GRAVITY", $.Single, -0.1);

    $.Constant({Static:true , Public:true }, "BUNKER_SCALE", $.Single, 0.03);

    $.Constant({Static:true , Public:true }, "PROJECTILE_SCALE", $.Single, 0.03);

    $.Constant({Static:true , Public:true }, "TURN_TIME_MAX", $.Int32, 100);

    $.Field({Static:true , Public:true }, "projectile_Count", $.Int32, 0);

    $.Field({Static:true , Public:true }, "random", $asm14.TypeRef("System.Random"));


    function Constants__cctor () {
      $thisType.projectile_Count = 0;
      $thisType.random = $S00().Construct();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Constants__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.Assets.ContainerClone */ 

(function ContainerClone$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.AssetsManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm07.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.Fusee.Serialization.TransformComponent)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0B.Fusee.Xene.ContainerExtensions)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Serialization.SceneComponentContainer")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Serialization.SceneComponentContainer")]))) ();
  };


  function ContainerClone__ctor (_fusfile) {
    this.container = new ($T01())();
    this.container = $T03().fusFiles.get_Item(_fusfile);
  }; 

  function ContainerClone_cloneContainer (_id) {
    var containerClone = $thisType.$Cast($T05().prototype.MemberwiseClone.call(this));
    var sceneNodeContainer = new ($T01())();
    sceneNodeContainer.Components = $S00().Construct();
    var transformComponent = new ($T07())();
    transformComponent.Translation = $T08().Zero.MemberwiseClone();
    transformComponent.Rotation = $T08().Zero.MemberwiseClone();
    transformComponent.Scale = $T08().One.MemberwiseClone();
    $S01().CallVirtual("Add", null, sceneNodeContainer.Components, transformComponent);
    $S01().CallVirtual("Add", null, sceneNodeContainer.Components, $T09().GetMaterial(containerClone.container, 0));
    $S01().CallVirtual("Add", null, sceneNodeContainer.Components, $T09().GetMesh(containerClone.container, 0));
    sceneNodeContainer.Name = "projectile";
    $T03().renameNodesRecursively(sceneNodeContainer, "", JSIL.ConcatString("_", $T04().$Box(_id)));
    return sceneNodeContainer;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.Assets.ContainerClone", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ContainerClone__ctor
    );

    $.Method({Static:false, Public:true }, "cloneContainer", 
      new JSIL.MethodSignature($asm07.TypeRef("Fusee.Serialization.SceneNodeContainer"), [$.Int32]), 
      ContainerClone_cloneContainer
    );

    $.Field({Static:false, Public:true }, "container", $asm07.TypeRef("Fusee.Serialization.SceneNodeContainer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.Assets.Bunker */ 

(function Bunker$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.Fusee.Serialization.SceneContainer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.AssetsManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm11.System.Linq.Enumerable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0B.Fusee.Xene.SceneFinderExtensions)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Predicate$b1.Of($asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0B.Fusee.Xene.ContainerExtensions)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Math)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.Fusee.Tutorial.Core.MapTile)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Projectile)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Assets.Constants)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.Fusee.Math.Core.float2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer"), $asm14.TypeRef("System.Predicate`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [$asm06.TypeRef("Fusee.Math.Core.float3"), $asm14.TypeRef("System.Single")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single")
      ]))) ();
  };


  function Bunker__ctor (_name) {
    $T01().prototype._ctor.call(this);
    this.$name = _name;
    this.scene = $T03().fusFiles.get_Item(this.$name);
    var expr_42 = $S00().CallStatic($T05(), "First$b1", [$asm07.Fusee.Serialization.SceneNodeContainer], $S01().CallStatic($T06(), "FindNodes", null, this.scene, $T07().New(this, null, new JSIL.MethodPointerInfo($thisType, "$l_ctor$gb__9_0", $S02(), false, false))));
    this.bunkerBase = (
      (expr_42 !== null)
         ? $T08().GetTransform(expr_42, 0)
         : null)
    ;
    var expr_71 = $S00().CallStatic($T05(), "First$b1", [$asm07.Fusee.Serialization.SceneNodeContainer], $S01().CallStatic($T06(), "FindNodes", null, this.scene, $T07().New(this, null, new JSIL.MethodPointerInfo($thisType, "$l_ctor$gb__9_1", $S03(), false, false))));
    this.bunkerPlatform = (
      (expr_71 !== null)
         ? $T08().GetTransform(expr_71, 0)
         : null)
    ;
    var expr_A0 = $S00().CallStatic($T05(), "First$b1", [$asm07.Fusee.Serialization.SceneNodeContainer], $S01().CallStatic($T06(), "FindNodes", null, this.scene, $T07().New(this, null, new JSIL.MethodPointerInfo($thisType, "$l_ctor$gb__9_2", $S04(), false, false))));
    this.bunkerCannon = (
      (expr_A0 !== null)
         ? $T08().GetTransform(expr_A0, 0)
         : null)
    ;
    this.bunkerBase.Scale = $S05().CallStatic($T09(), "op_Multiply", null, $T09().One.MemberwiseClone(), 0.03);
    this.shootForce = 10;
    this.ammo = 1;
    this._rotateSpeed = 0.0001;
  }; 

  function Bunker_$l_ctor$gb__9_0 (c) {
    return c.Name == JSIL.ConcatString("Base_", this.$name);
  }; 

  function Bunker_$l_ctor$gb__9_1 (c) {
    return c.Name == JSIL.ConcatString("Turn_", this.$name);
  }; 

  function Bunker_$l_ctor$gb__9_2 (c) {
    return c.Name == JSIL.ConcatString("CannonRohr_", this.$name);
  }; 

  function Bunker_liftCannon (_amount) {
    var num = +this.bunkerCannon.Rotation.z + (+_amount * +this._rotateSpeed);
    num = +$T0B().Max(num, 0.8);
    num = +$T0B().Min(num, 2);
    this.bunkerCannon.Rotation = $S06().Construct(this.bunkerCannon.Rotation.x, this.bunkerCannon.Rotation.y, num);
  }; 

  function Bunker_mountBunkerOnTile (_tile) {
    this.bunkerBase.Translation = _tile.get_CenterPos().MemberwiseClone();
    this.tile = _tile;
    this.tile.mountedBunker = this;
  }; 

  function Bunker_rotatePlatform (_amount) {
    this.bunkerPlatform.Rotation = $S06().Construct(this.bunkerPlatform.Rotation.x, (+this.bunkerPlatform.Rotation.y + (+_amount * +this._rotateSpeed)), this.bunkerPlatform.Rotation.z);
  }; 

  function Bunker_shootProjectile () {
    var pos = $T09().op_Addition($T09().op_Addition(this.bunkerBase.Translation.MemberwiseClone(), $S05().CallStatic($T09(), "op_Multiply", null, $S05().CallStatic($T09(), "op_Multiply", null, this.bunkerPlatform.Translation.MemberwiseClone(), 0.03).MemberwiseClone(), 1.1)).MemberwiseClone(), $S06().Construct(0, 0, 0));
    var projectile = new ($T0D())($T0E().projectile_Count, pos.MemberwiseClone());
    $T0E().projectile_Count = ((($T0E().projectile_Count | 0) + 1) | 0);
    var float = $T0E().angleToVector(+this.bunkerPlatform.Rotation.y + 3.14159274);
    var float2 = $T0E().angleToVector(+this.bunkerCannon.Rotation.z + 3.14159274);
    projectile.velocity = $S06().Construct(float.x, -float2.x, float.y);
    projectile.velocity = $S05().CallStatic($T09(), "op_Multiply", null, $T09().Normalize(projectile.velocity.MemberwiseClone()).MemberwiseClone(), this.shootForce);
    return projectile;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Fusee.Serialization.SceneContainer"), 
      Name: "Fusee.Tutorial.Core.Assets.Bunker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      Bunker__ctor
    );

    $.Method({Static:false, Public:false}, "$l.ctor$gb__9_0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), 
      Bunker_$l_ctor$gb__9_0
    )
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$l.ctor$gb__9_1", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), 
      Bunker_$l_ctor$gb__9_1
    )
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$l.ctor$gb__9_2", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), 
      Bunker_$l_ctor$gb__9_2
    )
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "liftCannon", 
      JSIL.MethodSignature.Action($.Single), 
      Bunker_liftCannon
    );

    $.Method({Static:false, Public:true }, "mountBunkerOnTile", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Tutorial.Core.MapTile")), 
      Bunker_mountBunkerOnTile
    );

    $.Method({Static:false, Public:true }, "rotatePlatform", 
      JSIL.MethodSignature.Action($.Single), 
      Bunker_rotatePlatform
    );

    $.Method({Static:false, Public:true }, "shootProjectile", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Tutorial.Core.Projectile")), 
      Bunker_shootProjectile
    );

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "tile", $asm09.TypeRef("Fusee.Tutorial.Core.MapTile"));

    $.Field({Static:false, Public:true }, "ammo", $.Int32);

    $.Field({Static:false, Public:true }, "scene", $asm07.TypeRef("Fusee.Serialization.SceneNodeContainer"));

    $.Field({Static:false, Public:true }, "bunkerBase", $asm07.TypeRef("Fusee.Serialization.TransformComponent"));

    $.Field({Static:false, Public:true }, "bunkerPlatform", $asm07.TypeRef("Fusee.Serialization.TransformComponent"));

    $.Field({Static:false, Public:true }, "bunkerCannon", $asm07.TypeRef("Fusee.Serialization.TransformComponent"));

    $.Field({Static:false, Public:true }, "shootForce", $.Single);

    $.Field({Static:false, Public:false}, "_rotateSpeed", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

